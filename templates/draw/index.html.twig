{% extends 'base.html.twig' %}

{% block body %}
<h2>Le grand tirage au sort</h2>

<div class="draw_explanations">
    <ul>
        <li>
            <h6>Étape 1 : Liste des participants</h6>
            <p>Utilisez les boutons "Ajouter un participant" et "Supprimer" pour ajuster le nombre de participants, puis confirmer pour l'inscription effective. <br>Pour chaque personne, veuillez indiquer une adresse email. <br>Chaque participant doit posséder une adresse mail unique</p>
        </li>
        <li>
            <h6>Étape 2 : Spécification des exclusions</h6>
            <p>Ajoutez des exclusions pour les participants. Si vous souhaitez que deux participants ne puissent pas se choisir mutuellement, remplissez le champ "Exclusions".</p>
        </li>
        <li>
            <h6>Étape 3 : Lancez le tirage au sort</h6>
            <p>Une fois les participants tous inscrits, cliquez sur 'lancez le tirage pour obtenir le résultat</p>
        </li>
        <li>
            <h6>Bonus : Liste au Père Noël</h6>
            <p>N'oubliez pas de vous rendre dans la rubrique 'Liste au Père Noël pour envoyer vos souhaits à la personne qui a été tirée au sort pour vous offrir un cadeau à Noël !</p>
        </li>
    </ul>
</div>
<form id="form_players" method="post" action="{{ path('draw_index') }}">
    <fieldset class="form_players-layout">
        <div class="email-participant_errors">
            <div class="email_participant-layout">
                <label for="participant_email" class="players">Email du participant :</label>
                <input type="email" id="participant_email" class="participant_email" required>
            </div>
            <span class="email_error-participant" id="email_error-participant">Veuillez entrer un email valide.</span>
        </div>
        <div class="email-participant_errors">
            <div class="email_participant-layout">
                <label for="participant_exclusion" class="players">Email de l'exclusion :</label>
                <input type="email" id="participant_exclusion" class="participant_exclusion">
            </div>
            <span class="email_error-participant" id="email_error-exclusion">Veuillez entrer un email valide.</span>
        </div>
        <button class="btn_add" type="button" onclick="addParticipant()">Confirmer</button>
    </fieldset>
    <table id="participants_table">
        <tbody id="participants_list">
            <!-- tableau des participants -->
        </tbody>
    </table>
    <input type="hidden" id="participants_data" name="participants_data">
    <button class="btn_play" type="button" onclick="submitForm()">Lancer le tirage</button>
</form>

<script>
    let participants = [];

    function addParticipant() {
        const emailInput = document.querySelector('#participant_email');
        const exclusionInput = document.querySelector('#participant_exclusion');
        const email = emailInput.value.trim();
        const exclusion = exclusionInput.value.trim();

        if (email === '') {
            document.querySelector('#email_error-participant').style.display = 'none';
        } else if (!validateEmail(email)) {
            document.querySelector('#email_error-participant').style.display = 'block';
            return;
        } else {
            document.querySelector('#email_error-participant').style.display = 'none';
        }

        if (exclusion !== '' && !validateEmail(exclusion)) {
            document.querySelector('#email_error-exclusion').style.display = 'block';
            return;
        } else {
            document.querySelector('#email_error-exclusion').style.display = 'none';
        }

        if (email) {
            const participant = {
                email: email,
                exclusion: exclusion
            };
            participants.push(participant);

            const participantRow = document.createElement('tr');
            participantRow.className = 'participant_item';
            
            const emailCell = document.createElement('td');
            emailCell.textContent = email + (exclusion ? ' (exclusion: ' + exclusion + ')' : '');
            participantRow.appendChild(emailCell);
            
            const actionsCell = document.createElement('td');
            const removeButton = document.createElement('button');
            removeButton.textContent = '-';
            removeButton.className = 'btn_remove';
            removeButton.onclick = function() {
                removeParticipant(email);
            };
            actionsCell.appendChild(removeButton);
            participantRow.appendChild(actionsCell);

            document.querySelector('#participants_list').appendChild(participantRow);

            emailInput.value = '';
            exclusionInput.value = '';
        }
    }

    function validateEmail(email) {
        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
        return emailPattern.test(email);
    }

    function removeParticipant(email) {
        participants = participants.filter(participant => participant.email !== email);
        const participantItems = document.querySelectorAll('.participant_item');
        participantItems.forEach(item => {
            if (item.querySelector('td').textContent.includes(email)) {
                item.remove();
            }
        });
    }

    function performDraw(participants) {
        let attempts = 0;
        const maxAttempts = 1000;

        while (attempts < maxAttempts) {
            let givers = [...participants];
            let receivers = [...participants];
            let pairs = [];

            shuffle(givers);

            for (let giver of givers) {
                let validReceivers = receivers.filter(receiver => 
                    receiver.email !== giver.email && receiver.email !== giver.exclusion
                );

                if (validReceivers.length === 0) {
                    break;
                }

                let receiver = validReceivers[Math.floor(Math.random() * validReceivers.length)];

                pairs.push({ giver: giver.email, receiver: receiver.email });

                receivers = receivers.filter(r => r.email !== receiver.email);
            }

            if (pairs.length === participants.length) {
                return { success: true, pairs: pairs };
            }

            attempts++;
        }

        return { success: false, message: 'Impossible to find a valid receiver for one of the givers after multiple attempts.' };
    }

    function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
            let j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    function submitForm() {
        const result = performDraw(participants);

        if (result.success) {
            const participantsDataInput = document.querySelector('#participants_data');
            participantsDataInput.value = JSON.stringify(result.pairs);
            document.querySelector('#form_players').submit();
        } else {
            alert(result.message);
        }
    }
</script>
{% endblock %}
