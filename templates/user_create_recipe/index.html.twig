{% extends "base.html.twig" %}

{% block body %}

<h2>Créer une nouvelle recette</h2>

<div class="container_creation">

    {{ form_start(recipeForm, {'attr': {'class': 'form_layout-recipe'}}) }}
        <fieldset class="form_field">
            {{ form_label(recipeForm.title, null, {'label_attr':{'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.title, {'attr': {'class': 'form_input'}}) }}  
        </fieldset> 

        <fieldset class="form_field">
            {{ form_label(recipeForm.description, null, {'label_attr': {'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.description, {'attr': {'class': 'form_input'}}) }}
            {{ form_errors(recipeForm.description) }}    
        </fieldset>

        <fieldset class="form_field">
            {{ form_label(recipeForm.photo, null, {'label_attr': {'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.photo, {'attr': {'class': 'form_input'}}) }}
            {{ form_errors(recipeForm.photo) }}
        </fieldset>

        <fieldset class="form_field">
            {{ form_label(recipeForm.duration, null, {'label_attr': {'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.duration, {'attr': {'class': 'form_input'}}) }}
        </fieldset>

        <fieldset class="form_field">
            {{ form_label(recipeForm.recipecategory, null, {'label_attr': {'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.recipecategory, {'attr': {'class': 'form_input'}}) }}
        </fieldset> 

        <fieldset class="form_field">
            {{ form_label(recipeForm.recipedifficulty, null, {'label_attr': {'class': 'form_label'}}) }}
            {{ form_widget(recipeForm.recipedifficulty, {'attr': {'class': 'form_input'}}) }}
        </fieldset>

        <fieldset class="form_field">
            {{ form_label(recipeForm.ingredients, null, {'label_attr': {'class': 'form_label'}}) }}
            <p class="ingredient-collection select-container" data-prototype="{{ form_widget(recipeForm.ingredients.vars.prototype)|e('html_attr') }}">
                {{ form_widget(recipeForm.ingredients) }}
                <button type="button" class="add-ingredient_link">Ajouter un ingrédient</button>
            </p>
        </fieldset>

        <fieldset class="form_field">
            {{ form_label(recipeForm.recipestep, null, {'label_attr': {'class': 'form_label'}}) }}
            <p class="step-collection select-container" data-prototype="{{ form_widget(recipeForm.recipestep.vars.prototype)|e('html_attr')}}">
                {{ form_widget(recipeForm.recipestep) }}
                <button type="button" class="add-step_link">Ajouter une étape</button>
            </p>
        </fieldset>

        <button type="submit" class="form_btn">Envoyer</button>

        <fieldset class="form_field">
            <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
        </fieldset>
    
    {{ form_end(recipeForm) }}

</div>

{% endblock %}

{% block javascripts %}

    {{ parent() }}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const ingredientCollectionHolder = document.querySelector('.ingredient-collection');
            const addIngredientButton = document.querySelector('.add-ingredient_link');
            ingredientCollectionHolder.dataset.index = ingredientCollectionHolder.querySelectorAll('input').length;

            addIngredientButton.addEventListener('click', function() {
                const prototype = ingredientCollectionHolder.dataset.prototype;
                const index = ingredientCollectionHolder.dataset.index;
                const newForm = prototype.replace(/__name__/g, index);
                ingredientCollectionHolder.dataset.index++;
                const newFormElement = document.createElement('div');
                newFormElement.innerHTML = newForm;
                newFormElement.classList.add('new-ingredient_item');
                ingredientCollectionHolder.insertBefore(newFormElement, addIngredientButton);
                addDeleteButton(newFormElement);
            });

            const stepCollectionHolder = document.querySelector('.step-collection');
            const addStepButton = document.querySelector('.add-step_link');
            stepCollectionHolder.dataset.index = stepCollectionHolder.querySelectorAll('input').length;

            addStepButton.addEventListener('click', function() {
                const prototype = stepCollectionHolder.dataset.prototype;
                const index = stepCollectionHolder.dataset.index;
                const newForm = prototype.replace(/__name__/g, index);
                stepCollectionHolder.dataset.index++;
                const newFormElement = document.createElement('div');
                newFormElement.innerHTML = newForm;
                newFormElement.classList.add('new-step_item');
                stepCollectionHolder.insertBefore(newFormElement, addStepButton);
                addDeleteButton(newFormElement);
            });

            function addDeleteButton(element) {
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.classList.add('remove-link');

                const removeIcon = document.createElement('img');
                removeIcon.src = '/build/images/else/poubelle.png'; 
                removeIcon.alt = 'Supprimer';
                removeIcon.classList.add('remove-icon');

                removeButton.appendChild(removeIcon);
                element.appendChild(removeButton);

                removeButton.addEventListener('click', function() {
                    element.remove();
                });
            }

            // Ajoutez les boutons de suppression existants
            document.querySelectorAll('.new-ingredient_item, .new-step_item').forEach(function(element) {
                addDeleteButton(element);
            });
        });

    </script>

{% endblock %}
